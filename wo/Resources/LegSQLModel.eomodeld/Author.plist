{
    attributes = (
        {
            allowsNull = Y; 
            columnName = district; 
            externalType = tinyint; 
            name = district; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            allowsNull = Y; 
            columnName = end; 
            externalType = varchar; 
            name = end; 
            valueClassName = NSString; 
            width = 10; 
        }, 
        {
            allowsNull = Y; 
            columnName = house; 
            externalType = char; 
            name = house; 
            valueClassName = NSString; 
            width = 1; 
        }, 
        {
            columnName = name; 
            externalType = varchar; 
            name = name; 
            valueClassName = NSString; 
            width = 10240; 
        }, 
        {
            allowsNull = Y; 
            columnName = "person_pk"; 
            externalType = INT; 
            name = personPk; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            columnName = pk; 
            externalType = INT; 
            name = pk; 
            valueClassName = NSNumber; 
            valueType = i; 
        }, 
        {
            allowsNull = Y; 
            columnName = start; 
            externalType = varchar; 
            name = start; 
            valueClassName = NSString; 
            width = 10; 
        }
    ); 
    attributesUsedForLocking = (personPk, pk); 
    className = "org.ganymede.leginfo.eo.Author"; 
    classProperties = (authorings, district, end, house, name, person, start); 
    externalName = authors; 
    fetchSpecificationDictionary = {}; 
    name = Author; 
    primaryKeyAttributes = (pk); 
    relationships = (
        {
            destination = BillAuthoring; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = auithorPk; sourceAttribute = pk; }); 
            name = authorings; 
        }, 
        {
            destination = Person; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = pk; sourceAttribute = personPk; }); 
            name = person; 
        }
    ); 
}

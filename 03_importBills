#!/usr/bin/perl

require "cmds.pl";

%options = &readOptions;

$session = $options{"session"};

for ($idx = 0; $idx < scalar(@ARGV); $idx++) {
    if ($ARGV[$idx] eq "-s") { $session = $ARGV[$idx+1]; }
}

sub nextKey {
    my $next = $_[0] + 1;
    $next = "0".$next;
    while (length($next) < 5) { $next = "0".$next; }
    return $next;
}

sub fixDate {
    my $orig = $_[0];
    # 06/25/2012
    my $y = substr($orig,6,4);
    my $m = substr($orig,0,2);
    my $d = substr($orig,3,2);
    return $y."-".$m."-".$d;
}

#
# The download script has downloaded new files from the leginfo.public.ca.gov site. If there was a new status file,
# the download script deleted the old status file.
#

@statusFiles = &doCmdResults("find leginfo.public.ca.gov/pub/".$session."/bill -name \*status.html");
print "\nFound status files # ".scalar(@statusFiles)."\n";

@statusInDB = &doSqlResults("select bill_num, status_file from bills where session_yrs = '".$session."';");

print "\nFound status files in db # ".scalar(@statusInDB)."\n";

foreach (@statusFiles) {
    $statusFile = $_;

    @parts = split '/', $statusFile;

    $fileName = pop @parts;
    push @parts, $fileName;

    shift @parts;
    shift @parts;

    ($house, $num, $x) = split '_', $fileName;

    $statusFromFiles{$house."_".$num} = join '/', @parts;
}

foreach (@statusInDB) {

    ($billNum, $statusFile) = split '\t', $_;
    $statusFromDB{$billNum} = $statusFile;
}

$maxPk = &doSqlResult("select max(pk) from bills;");

if ($maxPk eq "NULL") { $maxPk = 0; }

foreach (keys %statusFromFiles) {
    $billNum = $_;

    if (defined($statusFromDB{$billNum})) {

        if ($statusFromFiles{$billNum} ne $statusFromDB{$billNum}) {

            $nextStatus{$statusFromFiles{$billNum}} = $billNum;
        }
    } else {

        $maxPk++;
        push @sql, "insert into bills (pk, bill_num, session_yrs) values (".$maxPk.", '".$billNum."', '".$session."');\n";

        $nextStatus{$statusFromFiles{$billNum}} = $billNum;
    }
}

print "\nFound new bills to be created # ".scalar(@sql)."\n";

open M, "| ".&mysql;
foreach (@sql) { print M $_; }
close M;

@sql = ();

print "\nFound status info to be updated # ".scalar(keys %nextStatus)."\n";

foreach (keys %nextStatus) {

    $statusFile = $_;

    $billNum = $nextStatus{$statusFile};

    $cmd = "/bin/ls leginfo.public.ca.gov/pub/".$session."/bill/*/*/".$billNum."_*_history.html";
    $historyFile = `$cmd`;
    chomp($historyFile);

    $historyFile =~ s/leginfo.public.ca.gov\/pub\///;

    push @sql, "update bills set status_file = '".$statusFile."', ".
               "history_file = '".$historyFile."', ".
               "authors = NULL, ".
               "comm_action = NULL, ".
               "comm_action_date = NULL, ".
               "comm_location = NULL, ".
               "comm_vote_summary = NULL, ".
               "file_location = NULL, ".
               "file_date = NULL, ".
               "hearing_date = NULL, ".
               "house_location = NULL, ".
               "item = NULL, ".
               "last_hist_act_date = NULL, ".
               "last_hist_action = NULL, ".
               "status_date = NULL, ".
               "measure = NULL, ".
               "topic = NULL, ".
               "type_of_bill = NULL ".
               "where bill_num = '".$billNum."' and session_yrs = '".$session."';\n";

    open F, "leginfo.public.ca.gov/pub/".$statusFile;
    @lines  = <F>;
    chomp(@lines);
    close F;

    $idx = 0;

    #
    # Read in each line of the status file and put it into a numbered-key dictionary.
    #
    undef %lines;

    foreach (@lines) {
        $line = $_;

        $idxStr = "0".$idx; while (length($idxStr) < 5) { $idxStr = "0".$idxStr; }

        $lines{$idxStr} = $line;
        $idx++;
    }

    #
    # Remove the lines at the start that try to be HTML and meta tags. They are not helpful.
    #
    undef $foundPre;
    undef @deletable;

    foreach (sort keys %lines) {

        $key = $_;

        if (! defined($foundPre)) { push @deletable, $key; }

        if ($lines{$key} =~ /CURRENT BILL STATUS/) { $foundPre = 1; }
    }

    foreach (@deletable) { delete $lines{$_}; }

    foreach (keys %lines) { if ($lines{$_} eq "<br>") { delete $lines{$_}; }}
    foreach (keys %lines) { if ($lines{$_} =~ /html>$/) { delete $lines{$_}; }}

    # print "leginfo.public.ca.gov/pub/".$statusFile."\n\n";

    # foreach (sort keys %lines) { print "lines{".$_."} = \"".$lines{$_}."\"\n"; }

    #
    # Can do the recognition now and finish updating the bills table.
    #
    undef %billInfo;

    foreach (sort keys %lines) {

        $key = $_;

        if (defined($lines{$key})) {

            if ($lines{$key} =~ /^MEASURE\s*:/) {
                $billInfo{"measure"} = $';
            }

            if ($lines{$key} =~ /^AUTHOR\(S\)\s*:/) {
                $billInfo{"authors"} = $';
                $nextKey = &nextKey($key);
                while ($lines{$nextKey} =~ /^\s/) { $billInfo{"authors"} .= " ".$'; delete $lines{$nextKey}; $nextKey = &nextKey($nextKey); }
            }

            if ($lines{$key} =~ /^COMM. LOCATION\s*:/) {
                $billInfo{"comm_location"} = $';
            }

            if ($lines{$key} =~ /^COMM. ACTION DATE\s*:\s*/) {
                $billInfo{"comm_action_date"};
                $d = $'; @p = split '/', $d; $billInfo{"comm_action_date"} = $p[2]."-".$p[0]."-".$p[1];
            }

            if ($lines{$key} =~ /^COMM. ACTION\s*:/) {
                $billInfo{"comm_action"} = $';
                $nextKey = &nextKey($key);
                while ($lines{$nextKey} =~ /^\s/) { $billInfo{"comm_action"} .= " ".$'; delete $lines{$nextKey}; $nextKey = &nextKey($nextKey); }
            }

            if ($lines{$key} =~ /^FILE\s*:/) {
                $billInfo{"file_location"} = $';
            }

            if ($lines{$key} =~ /^FILE DATE\s*:\s*/) {
                $billInfo{"file_date"} = $';
                $d = $'; @p = split '/', $d; $billInfo{"file_date"} = $p[2]."-".$p[0]."-".$p[1];
            }

            if ($lines{$key} =~ /^HEARING DATE\s*:\s*/) {
                $billInfo{"hearing_date"} = $';
                $d = $'; @p = split '/', $d; $billInfo{"hearing_date"} = $p[2]."-".$p[0]."-".$p[1];
            }

            if ($lines{$key} =~ /^HOUSE LOCATION\s*:/) {
                $billInfo{"house_location"} = $';
            }

            if ($lines{$key} =~ /^ITEM\s*:/) {
                $billInfo{"item"} = $';
            }

            # Ignored here, but read from the latest version file.
            #
            # if ($lines{$key} =~ /^\+LAST AMENDED DATE\s*:\s*/) { }

            # last_hist_act_date:   07/06/2011

            if ($lines{$key} =~ /^LAST HIST. ACT. DATE:\s*/) {
                $billInfo{"last_hist_act_date"} = $';
                $d = $'; @p = split '/', $d; $billInfo{"last_hist_act_date"} = $p[2]."-".$p[0]."-".$p[1];
            }

            if ($lines{$key} =~ /^LAST HIST. ACTION\s*:/) {
                $billInfo{"last_hist_action"} = $';
                $nextKey = &nextKey($key);
                while ($lines{$nextKey} =~ /^\s/) { $billInfo{"last_hist_action"} .= " ".$'; delete $lines{$nextKey}; $nextKey = &nextKey($nextKey); }
            }

            if ($lines{$key} =~ /^TOPIC\s*:/) {
                $billInfo{"topic"} = $';
                $nextKey = &nextKey($key);
                while ($lines{$nextKey} =~ /^\s/) { $billInfo{"topic"} .= " ".$'; delete $lines{$nextKey}; $nextKey = &nextKey($nextKey); }
            }

            if ($lines{$key} =~ /^TYPE OF BILL\s*:/) {
                $billInfo{"type_of_bill"} = $';
                $nextKey = &nextKey($key);
                while ($lines{$nextKey} =~ /^\s/) { $billInfo{"type_of_bill"} .= ", ".$'; delete $lines{$nextKey}; $nextKey = &nextKey($nextKey); }
            }
        }
    }

    foreach (keys %billInfo) { $billInfo{$_} =~ s/^\s*//; $billInfo{$_} =~ s/\s*$//; $billInfo{$_} =~ s/\s\s*/ /g; }

    $billInfo{"type_of_bill"} =~ s/,\s*/,/g;
    $billInfo{"type_of_bill"} =~ s/^,//g;

    # print "\nBILL_INFO:\n";

    # foreach (sort keys %billInfo) { print "bill{".$_."} = \"".$billInfo{$_}."\"\n"; }

    undef @updates;

    foreach (sort keys %billInfo) {
        $column = $_;
        $value = $billInfo{$column};
        $value =~ s/'/''/g;
        push @updates, $column." = '".$value."'";
    }

    push @sql, "update bills set ".(join ', ', @updates)." where bill_num = '".$nextStatus{$statusFile}."';\n";
    # print "\n";
}

push @sql, "update bills set history_file = NULL where history_file = '';\n";

open M, "| ".&mysql;
foreach (@sql) { print M $_; }
close M;

@sql = ();

#
# Update the bill_types table and the joins to the bills.
#

&doSqlResult("delete from bill_type_joins;");

@typesInFiles = &doSqlResults("select pk, type_of_bill from bills;");

$maxPk = &doSqlResult("select max(pk) from bill_types;");
if ($maxPk eq "NULL") { $maxPk = 0; }

# Make sure we have something for every bill type.
#
foreach (@typesInFiles) {
    ($billPk, $billTypes_list) = split '\t', $_;
    @billTypes = split ',', $billTypes_list;
    foreach (@billTypes) {
        $types{$_} = 1;
    }
}

foreach (sort keys %types) {
    $type = $_;
    $pk = &doSqlResult("select pk from bill_types where name = '".$type."';");
    if ($pk eq "") { $maxPk++; &doSqlResults("insert into bill_types (pk, name) values (".$maxPk.", '".$type."');"); }
}

# Link the bill types to the bills.
#
foreach (@typesInFiles) {

    ($billPk, $billTypes_list) = split '\t', $_;

    @billTypes = split ',', $billTypes_list;

    foreach (@billTypes) {
        $billType = $_;
        if ($billType eq "NULL") {
            print "\nbill_type is NULL for status of bill \"".$billNum."\"\n";
        } else {
            push @sql, "insert into bill_type_joins (bill_pk, bill_type_pk) values (".$billPk.", (select pk from bill_types where name = '".$billType."'));\n";
        }
    }
}

open M, "| ".&mysql;
foreach (@sql) { print M $_; }
close M;

print "\nCreate bill_type joins # ".scalar(@sql)."\n";

@sql = ();

print "\n";

exit(0);
